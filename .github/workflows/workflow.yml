name: Deployment Workflow

on: [push]

jobs:

  Test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: go test ./...

  Deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: Test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Cloudflared
        run: |
          curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o cloudflared
          chmod +x cloudflared
          sudo mv cloudflared /usr/local/bin/

      - name: Authenticate Cloudflare Tunnel
        run: |
          mkdir -p ~/.cloudflared
          echo "${{ secrets.CLOUDFLARED_TUNNEL_CREDENTIALS }}" > ~/.cloudflared/credentials.json
          echo "${{ secrets.CLOUDFLARED_TUNNEL_SECRETKEY }}" > ~/.cloudflared/cert.pem

      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.CLOUDFLARED_SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Sync Environment
        run: |
          cat > .env << EOF
          ENV=production
  
          APP_PORT=8080
          APP_VERSION=${{ github.sha }}
          APP_FRONTEND_PATH=${{ secrets.APP_FRONTEND_PATH }}
          
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=tongla-${{ secrets.DB_NAME }}
          
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_SENDER=${{ secrets.SMTP_SENDER }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          EOF

          cat ./.env | ssh -o ProxyCommand="cloudflared access ssh --hostname ${{ secrets.CLOUDFLARED_SSH_HOST }}" \
            -o StrictHostKeyChecking=no \
            -o UserKnownHostsFile=/dev/null \
            ${{ secrets.CLOUDFLARED_SSH_USER }}@${{ secrets.CLOUDFLARED_SSH_HOST }} 'cat > ~/server/tongla-account-backend/.env'

      - name: Access Server
        run: |
          ssh -tt -o ProxyCommand="cloudflared access ssh --hostname ${{ secrets.CLOUDFLARED_SSH_HOST }}" \
              -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              ${{ secrets.CLOUDFLARED_SSH_USER }}@${{ secrets.CLOUDFLARED_SSH_HOST }} << EOF

          set -e
          cd server/tongla-account-backend/
          git fetch --all 
          git reset --hard origin/main 

          docker system prune
          docker image prune -a -f
          docker compose up --build -d

          exit
